<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kAir]]></title>
  <link href="http://kAirzhen.github.io/atom.xml" rel="self"/>
  <link href="http://kAirzhen.github.io/"/>
  <updated>2014-07-29T00:03:19+08:00</updated>
  <id>http://kAirzhen.github.io/</id>
  <author>
    <name><![CDATA[贞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[往本地文件系统写入用户注册信息的两种方法]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/07/28/%E5%BE%80%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%86%99%E5%85%A5%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <updated>2014-07-28T00:00:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/07/28/往本地文件系统写入用户注册信息的两种方法</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;往本地文件系统写入用户注册信息的两种方法&rdquo;
date: 2014-07-28 22:13
comments: true
categories:
&mdash;&ndash; 往本地文件系统写入用户注册信息的两种方法</p>

<p>&ndash;(IBAction)userRegister:(id)sender{</p>

<p>NSString*userRecord = [NSString stringWithFormat:@“\n%@,%@,%@&ldquo;,</p>

<pre><code>               self.userName.text,

               self.password.text,

               self.email.text];
</code></pre>

<p>NSString *docDir = [NSSearchPathForDirectoriesInDomains,</p>

<pre><code>                            NSDocumentDirectory,

                            NSUserDomainMask,YES)objectAtIndex: 0
</code></pre>

<p>];</p>

<p>NSString *userFile = [docDir stringByAppendingPathComponent:@&ldquo;userDat a.csv”];
NSLog(@“%@“,userFile);</p>

<p>if(![[NSFileManager defaultManager]fileExistsAtPath:userFile]){</p>

<p>if([[NSFileManager defaultManager]createFileAtPath:userFile contents:ni l attributes:nil)</p>

<p>NSLog(@“YES”);
else{</p>

<p>NSLog(@&ldquo;NO&mdash;注册失败!”);</p>

<pre><code>             }
      }
</code></pre>

<p>NSFileHandle *fileHandle = [NSFileHandle fileHandleForUpdatingAtPath:us erFile];</p>

<p>[fileHandle seekToEndOfFile];</p>

<p> [fileHandle writeData:[userRecord dataUsingEncoding:NSUTF8StringEncoding]];</p>

<p>[fileHandle closeFile];</p>

<p>[self regSuccess]</p>

<p>self.userName.text = @“&#8221;;</p>

<p>self.password.text = @“&#8221;;
self.email.text = @“&#8221;;
}
另外,还有一个辅助的方法 regSuccess,用来在屏幕上弹出用户注册成功的提示信息:
&ndash;(void)regSuccess{
  UIAlertView <em>alertDialog;
  alertDialog = [[UIAlertView alloc]initWithTitle:@&ldquo;EntLib.com 电子图书管理系统&rdquo;       message:@&ldquo;注册成功!&rdquo;
  delegate:self
  cancelButtonTitle:@&ldquo;OK&rdquo;
  otherButtonTitles:nil];
  [alertDialog show];}
接下来,是一个 NSFileHandle 类的 fileHandleForUpdatingAtPath 方法,获取指定该文件的引用,更新该文件。跳到文件的末尾,调用 writeData 方法,将用户注册信息写入到文件中。NSFileHandle </em>fileHandle =[NSFileHandle fileHandleForUpdatingAtPath:us erFile];[fileHandle seekToEndOfFile];
[fileHandle writeData:[userRecord dataUsingEncoding:NSUTF8StringEncoding];[fileHandle closeFile];在文件写入完毕之后,调用 closeFile 方法关闭文件手柄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calay和uiview]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/07/22/CALay%E5%92%8CUIView/"/>
    <updated>2014-07-22T00:00:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/07/22/CALay和UIView</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;CALayer和UIView&rdquo;
date: 2014-07-22 23:49
comments: true
categories:
&mdash;-学习
两者最大的区别是,图层不会直接渲染到屏幕上，UIView是iOS系统中界面元素的基础，所有的界面元素都是继承自它。它本身完全是由CoreAnimation来实现的。它真正的绘图部分，是由一个CALayer类来管理。UIView本身更像是一个CALayer的管理器。一个UIView上可以有n个CALayer，每个layer显示一种东西，增强UIView的展现能力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/07/19/hello/"/>
    <updated>2014-07-19T16:05:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/07/19/hello</id>
    <content type="html"><![CDATA[<p>hello！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake-aborted]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/07/08/rake-aborted/"/>
    <updated>2014-07-08T15:52:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/07/08/rake-aborted</id>
    <content type="html"><![CDATA[<p><strong><strong>当时使用octopress生成网页时，报错如下</strong></strong>
<img src="http://kAirzhen.github.io/images/post/2014-07-18-rake-aborted/rake-aborted-1.png"></p>

<p><strong><strong>后来，直接把最新版本rake卸载即可。如下图:</strong></strong>
<img src="http://kAirzhen.github.io/images/post/2014-07-18-rake-aborted/rake-aborted-2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake 命令]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/07/08/rake-T/"/>
    <updated>2014-07-08T15:52:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/07/08/rake-T</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake clean                     # Clean out caches: .pygments-cache, .gist-c...
</span><span class='line'>rake copydot[source,dest]      # copy dot files for deployment
</span><span class='line'>rake deploy                    # Default deploy task
</span><span class='line'>rake gen_deploy                # Generate website and deploy
</span><span class='line'>rake generate                  # Generate jekyll site
</span><span class='line'>rake install[theme]            # Initial setup for Octopress: copies the de...
</span><span class='line'>rake integrate                 # Move all stashed posts back into the posts...
</span><span class='line'>rake isolate[filename]         # Move all other posts than the one currentl...
</span><span class='line'>rake list                      # list tasks
</span><span class='line'>rake new_page[filename]        # Create a new page in source/(filename)/ind...
</span><span class='line'>rake new_post[title]           # Begin a new post in source/_posts
</span><span class='line'>rake preview                   # preview the site in a web browser
</span><span class='line'>rake push                      # deploy public directory to github pages
</span><span class='line'>rake rsync                     # Deploy website via rsync
</span><span class='line'>rake set_root_dir[dir]         # Update configurations to support publishin...
</span><span class='line'>rake setup_github_pages[repo]  # Set up _deploy folder and deploy branch fo...
</span><span class='line'>rake update_source[theme]      # Move source to source.old, install source ...
</span><span class='line'>rake update_style[theme]       # Move sass to sass.old, install sass theme ...
</span><span class='line'>rake watch                     # Watch the site and regenerate when it changes</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
