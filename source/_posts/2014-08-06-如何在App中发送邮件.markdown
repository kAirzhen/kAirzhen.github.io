---
layout: post
title: "如何在App中发送邮件"
date: 2014-08-06 20:04
comments: true
categories: 学习
---
目标：App 实现的功能是 – 当用户轻拍 Contact Us 按钮时,将弹出 email 界面。

首先，interface builder 界面,连接按钮和 action 方法。命名方法名称 – showEmail, 保留 Event 事件为 Touch Up Inside。
然后，实现 Email 接口，接着,引入 MessageUI.h 头文件,实现在 SimpleEmailViewController.h 中 MFMailComposeViewControllerDelegate 委托。
代码实现：

#import <UIKit/UIKit.h>#import <MessageUI/MessageUI.h>@interface SimpleEmailViewController : UIViewController <MFMailComposeViewControllerDelegate> // Add the delegate - (IBAction)showEmail:(id)sender;@end选择 SimpleEmailViewController.m 文件,实现 showEmail 方法和MFMailComposeViewControllerDelegate 委托。在实现文件中添加如下代码:￼- (IBAction)showEmail:(id)sender { // Email SubjectNSString *emailTitle = @"Test Email";NSString *messageBody = @"This programming is so fun!";NSArray *toRecipents = [NSArray arrayWithObject:@"support@appcoda.com"];MFMailComposeViewController *mc = [[MFMailComposeViewController alloc] init];mc.mailComposeDelegate = self;[mc setSubject:emailTitle];[mc setMessageBody:messageBody isHTML:NO]; [mc setToRecipients:toRecipents];[self presentViewController:mc animated:YES completion:NULL];}//在屏幕上显示 email 界面- (void) mailComposeController:(MFMailComposeViewController *)controller￼didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {switch (result) {case MFMailComposeResultCancelled: NSLog(@"Mail cancelled");break;case MFMailComposeResultSaved: NSLog(@"Mail saved");break;case MFMailComposeResultSent: NSLog(@"Mail sent");break;case MFMailComposeResultFailed:NSLog(@"Mail sent failure: %@", [error localizedDescription]); break;default: break;}[self dismissViewControllerAnimated:YES completion:NULL];}代码定义了邮件的主题,邮件内容和接收人，创建了内置的 MFMailComposeViewController 对象，MFMailComposeViewController 类提供了标准接口管理编辑和发送 email 消息。可以使用这个视图控制器在App 中显示一个标准的 email 视图。使用初始值,包括接收人邮件地 址,主题和邮件内容等等填充该视图的相关字段。