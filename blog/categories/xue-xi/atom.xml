<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 学习 | kAir]]></title>
  <link href="http://kAirzhen.github.io/blog/categories/xue-xi/atom.xml" rel="self"/>
  <link href="http://kAirzhen.github.io/"/>
  <updated>2014-09-02T13:44:17+08:00</updated>
  <id>http://kAirzhen.github.io/</id>
  <author>
    <name><![CDATA[贞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[形象化理解assign]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/09/02/assign%2Ccopy%2Cstrong%E5%BD%A2%E8%B1%A1%E5%8C%96/"/>
    <updated>2014-09-02T13:13:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/09/02/assign,copy,strong形象化</id>
    <content type="html"><![CDATA[<hr />

<p><strong>举个例子</strong>:</p>

<pre><code>NSString *houseOfMM = [[NSString alloc] initWithString:'装梵几的三室两厅'];
</code></pre>

<p><strong>上面一段代码会执行以下两个动作:</strong></p>

<ol>
<li>在堆上分配一段内存用来存储@&lsquo; 装梵几的三室两厅 &rsquo; ,比如:内存地址为 0X1111  内容为 &lsquo; 装梵几的三室两厅&rsquo; ，</li>
<li>在栈上分配一段内存用来存储 houseForWife ,比如:地址为 0XAAAA  内容自然为 0X1111</li>
</ol>


<p><strong>下面分别看下(assign,retain,copy):</strong></p>

<ol>
<li>assign的情况: NSString  * myHouse  = [ houseOfMM   assign ];<br/>
此时 myHouse 和 houseOfMM 完全相同,地址都是 0XAAAA  ,内容为 0X1111  ,即 myHouse 只是 houseOfMM 的别名,对任何一个操作就等于对另一个操作。因此 retainCount 不需要增加.(同进同出，关系好，一把钥匙，给我拿着)</li>
<li>retain的情况： NSString  *  myHouse  = [ houseOfMM   retain ];<br/>
此时 myHouse 的地址不再为 0XAAAA ,可能为 0XAABB ,但是内容依然为 0X1111 .因此 myHouse 和 houseOfMM 都可以管理' 装梵几的三室两厅 &lsquo;所在的内存。因此  retainCount 需要增加1.（有些独立，各自进出，两把钥匙）</li>
<li>copy的情况： NSString  *  myHouse  = [ houseOfMM   copy ];<br/>
此时会在堆上重新开辟一段内存存放@&lsquo;装梵几的三室两厅&rsquo;,比如0X1122,内容为@&lsquo;装梵几的三室两厅&rsquo;,同时会在栈上为myHouse分配空间,比如地址:0XAACC,内容为0X1122,因此retainCount增加1供myHouse来管理0X1122这段内存.(两套@&lsquo;装梵几的三室两厅'，条件好，分居了，房子一人一套，所以钥匙一人一把。)</li>
</ol>


<p> <strong><em>什么时候用assign,当然是破房子，简装的房子拉</em></strong></p>

<p>基础类型（简单类型，原子类型）：NSInteger,CGPoint,CGFloat,C数据类型（int,float,double,char等）</p>

<p> <strong><em>什么时候用copy</em></strong></p>

<p>含有可深拷贝的mutable子类的类，如NSArray，NSSet，NSDictionary，NSData的，NSCharacterSet，NSIndexSet，NSString
(可深度拷贝的房子)
但是NSMutableArray这样的不可以，Mutable的不能用copy,不然初始化会有问题。切记</p>

<p> <strong><em>什么时候用retain</em></strong></p>

<p>其他NSObject和其子类对象好嘛 (大多数)</p>

<h5>ARC中的strong相当于非ARC中的retain，ARC来了以后多搞一把钥匙就strong了啦。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git创建远程分支]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/07/git%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <updated>2014-08-07T18:30:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/07/git创建远程分支</id>
    <content type="html"><![CDATA[<h4>在git里面，分支允许隔离开发自己的项目。创建远程分支步骤如下：</h4>

<pre><code>  1.先git init//创建git版本库
  2.在git branch develop//本地电脑创建了一个develop分支
  3.git remote add origin https://github.com/kAirzhen/kAirzhen.github.io//关联远程代码库了么
  4.git add .//添加想要提交的文件名称，此处表示将当前目录（包括其子目录）所有被修改或者已删除的文档，以及用户所添加的新文档，追加到索引中。
  5.git commit -a -m "保存develop分支"//只将所有被修改或者已删除的且已经被git管理的文档提交到仓库中，并描述提交信息。
  6.git push origin develop//把本地文件就提交到了远程develop分支上
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外部化表数据之Property List]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/06/%E5%A4%96%E9%83%A8%E5%8C%96%E8%A1%A8%E6%95%B0%E6%8D%AE%E4%B9%8BProperty+List/"/>
    <updated>2014-08-06T20:48:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/06/外部化表数据之Property List</id>
    <content type="html"><![CDATA[<pre><code>将静态数据从代码中分离出来是一个很好的做法。
假设让需要添加100多个新数据到应用程序中,需要返回源代码,将新的数据添加到初始化代码中，这无疑使得代码看起来表冗长。同时编辑这些代码并不简单,并且必须要严格遵守Objective-C语法，更改代码可能会引入其他错误。最好是将数据和代码逻辑分离。
Property List 提供了一个方便的方法来存放简单的结构数据,通常为XML格式。但是不能使用Property List 存放所有类型的数据。
下面开始转换数据为 Property List：
首先创建一个空的Property List 文件。
其次在Property List中添加n个数据数组，并添加完成了所有数组元素。
最后Property List中读取内容相当简单iOS SDK已经有内置的方法来处理该文件的读写操作。
Property List并不是存放表数据的最好方法，还有很多其他方法。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写html邮件]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/06/%E7%BC%96%E5%86%99HTML%E9%82%AE%E4%BB%B6/"/>
    <updated>2014-08-06T20:24:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/06/编写HTML邮件</id>
    <content type="html"><![CDATA[<hr />

<pre><code>....在 SimpleEmail App 中仅仅支持文本邮件。通过更改 setMessageBody 方法中的 isHTML 参数 – 从 N 更改为 Y,App 将支持 HTML 邮件。再次更 改 showEmail 方法的代码如下:
    -(IBAction)showEmail:(id)sender {// Email Subject
 NSString *emailTitle = @"Test Email"; // Email Content
      ￼NSString *messageBody = @"&lt;h1&gt;Test iOS Programming!&lt;/h1&gt;"; 
      NSArray *toRecipents = [NSArray arrayWithObject:@"support@appcoda.com"];
      MFMailComposeViewController *mc = [[MFMailComposeViewController alloc] init];
      mc.mailComposeDelegate = self;
      [mc setSubject:emailTitle];
      [mc setMessageBody:messageBody isHTML:YES]; 

 [mc setToRecipients:toRecipents];
      [self presentViewController:mc animated:YES completion:NULL];
     }
</code></pre>

<p>   &hellip;.编译并再次运行 App。经过一些简单的更改,SimpleEmail 应用程序现在提供了HTML 支持了!注：Xcode不知道 MFMailComposeViewController 是什么。尽管MFMailComposeViewController 是iOS SDK内置的控制器,但是需要在项目中嵌入必要的框架MessageUI.framework。否则编译时会报错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在App中发送邮件]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/06/%E5%A6%82%E4%BD%95%E5%9C%A8App%E4%B8%AD%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <updated>2014-08-06T20:04:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/06/如何在App中发送邮件</id>
    <content type="html"><![CDATA[<hr />

<p>  &hellip; 目标：App 实现的功能是 – 当用户轻拍 Contact Us 按钮时,将弹出 email 界面。
首先，interface builder 界面,连接按钮和 action 方法。命名方法名称 – showEmail, 保留 Event 事件为 Touch Up Inside。
然后，实现 Email 接口，接着,引入 MessageUI.h 头文件,实现在 SimpleEmailViewController.h 中 MFMailComposeViewControllerDelegate 委托。
代码实现：</p>

<hr />

<pre><code> #import &lt;UIKit/UIKit.h&gt;     #import &lt;MessageUI/MessageUI.h&gt;     @interface SimpleEmailViewController : UIViewController     &lt;MFMailComposeViewControllerDelegate&gt; // Add the delegate - (IBAction)showEmail:(id)sender;     @end
 选择 SimpleEmailViewController.m 文件,实现 showEmail 方法MFMailComposeViewControllerDelegate 委托。在实现文件中添加如下代码:
</code></pre>

<p><em><em><em>     ￼-(IBAction)showEmail:(id)sender { // Email Subject     NSString </em>emailTitle = @&ldquo;Test Email&rdquo;;     NSString </em>messageBody = @&ldquo;This programming is so fun!&rdquo;;     NSArray </em>toRecipents = [NSArray arrayWithObject:@&ldquo;<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#117;&#112;&#x70;&#111;&#114;&#x74;&#64;&#97;&#x70;&#x70;&#99;&#x6f;&#100;&#x61;&#x2e;&#99;&#111;&#109;">&#x73;&#x75;&#x70;&#x70;&#x6f;&#x72;&#116;&#64;&#x61;&#x70;&#x70;&#99;&#x6f;&#x64;&#x61;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;];     MFMailComposeViewController <em>mc = [[MFMailComposeViewController alloc] init];     mc.mailComposeDelegate = self;     [mc setSubject:emailTitle];     [mc setMessageBody:messageBody isHTML:NO];      [mc setToRecipients:toRecipents];     [self presentViewController:mc animated:YES completion:NULL];     }//在屏幕上显示 email 界面     &ndash; (void) mailComposeController:(MFMailComposeViewController </em>)controller     ￼didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {     switch (result) {     case MFMailComposeResultCancelled: NSLog(@&ldquo;Mail cancelled&rdquo;);     break;     case MFMailComposeResultSaved: NSLog(@&ldquo;Mail saved&rdquo;);     break;     case MFMailComposeResultSent: NSLog(@&ldquo;Mail sent&rdquo;);     break;     case MFMailComposeResultFailed:     NSLog(@&ldquo;Mail sent failure: %@&rdquo;, [error localizedDescription]); break;     default: break;     }     [self dismissViewControllerAnimated:YES completion:NULL];     }&hellip;代码定义了邮件的主题,邮件内容和接收人，创建了内置的 MFMailComposeViewController 对象，MFMailComposeViewController 类提供了标准接口管理编辑和发送 email 消息。可以使用这个视图控制器在App 中显示一个标准的 email 视图。使用初始值,包括接收人邮件地 址,主题和邮件内容等等填充该视图的相关字段。</p>
]]></content>
  </entry>
  
</feed>
