<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 学习 | kAir]]></title>
  <link href="http://kAirzhen.github.io/blog/categories/xue-xi/atom.xml" rel="self"/>
  <link href="http://kAirzhen.github.io/"/>
  <updated>2014-09-03T13:52:16+08:00</updated>
  <id>http://kAirzhen.github.io/</id>
  <author>
    <name><![CDATA[贞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OC基础之NSSet、NSMutableSet、NSCountedSet等]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/09/03/OC-zhong-nsset-deng-ji-he-lei-yong-fa/"/>
    <updated>2014-09-03T12:27:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/09/03/OC-zhong-nsset-deng-ji-he-lei-yong-fa</id>
    <content type="html"><![CDATA[<hr />

<h4><strong>集合的特点：集合是无序性，集合中的元素都具有互异性</strong></h4>

<p><strong>NSSet</strong>是一种基础集合。<br/>
  例：</p>

<pre><code>NSSet* shoppinglist = [[NSSet alloc] initWithObjects:@"milk",@"pen",@"bananas",@"milk",@"bread", nil];
</code></pre>

<p><strong>NSMutableSet</strong>是一种可变集合，可以添加，删除对象。如果添加的对象在集合中已存在，则不添加，若移除的元素在集合中存在多个，移除会将所有相同的对象全部移除。      <br/>
例：</p>

<pre><code> NSMutableSet* mutableList = [[NSMutableSet alloc] initWithSet:shoppinglist];
[mutableList addObject:@"meat"];            
[mutableList removeObject:@"milk"];   
NSLog(@"originlist = %@",shoppinglist);
NSLog(@"mutablelist = %@",mutableList);
</code></pre>

<p>显示结果：
````originlist = {(</p>

<pre><code>bread,
bananas,
milk,
pen
</code></pre>

<p>)} ````<br/>
``````mutablelist = {(</p>

<pre><code>bread,
meat,
bananas,
pen
</code></pre>

<p>)}``````</p>

<p><strong>NSCountedSet</strong>是一种可计数集合，也可以添加，删除元素。如果添加的对象会增加对象在集合中出现的次数，可对该元素计数+1。如果移除的对象在集合中有重复，只能移除一个对象。
例：</p>

<pre><code>NSSet* shoppinglist = [[NSSet alloc] initWithObjects:@"milk",@"pen",@"bananas",@"milk",@"bread", nil];
NSCountedSet* cSetOfNumber = [NSCountedSet  setWithSet:shoppinglist];
NSLog(@"csetofnumber = %@", cSetOfNumber);
NSInteger mcount = [cSetOfNumber count];
[cSetOfNumber addObject:@"egg"];
[cSetOfNumber removeObject:@"pen"];
[cSetOfNumber addObject:@"milk"];
NSInteger milkCount = [cSetOfNumber countForObject:@"milk"];
mcount = [cSetOfNumber count];
NSLog(@"milkCount = %d,mcount = %d",milkCount,mcount);
NSLog(@"csetofnumber = %@", cSetOfNumber);
</code></pre>

<p>显示结果：
<code>csetofnumber = &lt;NSCountedSet: 0x8f60be0&gt; (bread [1], bananas [1], milk [1], pen [1])</code>  <br/>
<code>milkCount = 2,mcount = 4</code>  <br/>
<code>csetofnumber = &lt;NSCountedSet: 0x8f60be0&gt; (bread [1], egg [1], bananas [1], milk [2])</code></p>

<p>想让集合有序可以使用<strong>NSOrderedSet</strong>和<strong>NSMutableOrderedSet</strong>，顾名思义这两种集合都是有序的，前者不可变，后者添加对象，移除对象，交换对象顺序。
例：</p>

<pre><code>NSOrderedSet* setofnumber = [NSOrderedSet orderedSetWithArray:@[@1,@7,@3,@0,@6,@9]];
NSLog(@"setofnumer =%@",setofnumber);
NSMutableOrderedSet* muSetOfNumber = [NSMutableOrderedSet orderedSetWithArray:@[@1,@7,@3,@0,@6,@9]];
[muSetOfNumber addObject:@5];
[muSetOfNumber removeObject:@3];
[muSetOfNumber exchangeObjectAtIndex:1 withObjectAtIndex:2];
NSLog(@"muSerOfNumber = %@",muSetOfNumber);
</code></pre>

<p>显示结果：
````setofnumer ={(</p>

<pre><code>1,
7,
3,
0,
6,
9
</code></pre>

<p>)}
````</p>

<p>````muSerOfNumber = {(</p>

<pre><code>1,
0,
7,
6,
9,
5
</code></pre>

<p>)}
````</p>

<h4><strong>以上所有集合都具有显示的唯一性，集合内相同的元素都识别为同一元素。</strong></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[形象化理解assign]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/09/02/assign%2Ccopy%2Cstrong%E5%BD%A2%E8%B1%A1%E5%8C%96/"/>
    <updated>2014-09-02T13:13:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/09/02/assign,copy,strong形象化</id>
    <content type="html"><![CDATA[<hr />

<p><strong>举个例子</strong>:</p>

<pre><code>NSString *houseOfMM = [[NSString alloc] initWithString:'装梵几的三室两厅'];
</code></pre>

<p><strong>上面一段代码会执行以下两个动作:</strong></p>

<ol>
<li>在堆上分配一段内存用来存储@&lsquo; 装梵几的三室两厅 &rsquo; ,比如:内存地址为 0X1111  内容为 &lsquo; 装梵几的三室两厅&rsquo; ，</li>
<li>在栈上分配一段内存用来存储 houseForWife ,比如:地址为 0XAAAA  内容自然为 0X1111</li>
</ol>


<p><strong>下面分别看下(assign,retain,copy):</strong></p>

<ol>
<li>assign的情况: NSString  * myHouse  = [ houseOfMM   assign ];<br/>
此时 myHouse 和 houseOfMM 完全相同,地址都是 0XAAAA  ,内容为 0X1111  ,即 myHouse 只是 houseOfMM 的别名,对任何一个操作就等于对另一个操作。因此 retainCount 不需要增加.(同进同出，关系好，一把钥匙，给我拿着)</li>
<li>retain的情况： NSString  *  myHouse  = [ houseOfMM   retain ];<br/>
此时 myHouse 的地址不再为 0XAAAA ,可能为 0XAABB ,但是内容依然为 0X1111 .因此 myHouse 和 houseOfMM 都可以管理' 装梵几的三室两厅 &lsquo;所在的内存。因此  retainCount 需要增加1.（有些独立，各自进出，两把钥匙）</li>
<li>copy的情况： NSString  *  myHouse  = [ houseOfMM   copy ];<br/>
此时会在堆上重新开辟一段内存存放@&lsquo;装梵几的三室两厅&rsquo;,比如0X1122,内容为@&lsquo;装梵几的三室两厅&rsquo;,同时会在栈上为myHouse分配空间,比如地址:0XAACC,内容为0X1122,因此retainCount增加1供myHouse来管理0X1122这段内存.(两套@&lsquo;装梵几的三室两厅'，条件好，分居了，房子一人一套，所以钥匙一人一把。)</li>
</ol>


<p> <strong><em>什么时候用assign,当然是破房子，简装的房子拉</em></strong></p>

<p>基础类型（简单类型，原子类型）：NSInteger,CGPoint,CGFloat,C数据类型（int,float,double,char等）</p>

<p> <strong><em>什么时候用copy</em></strong></p>

<p>含有可深拷贝的mutable子类的类，如NSArray，NSSet，NSDictionary，NSData的，NSCharacterSet，NSIndexSet，NSString
(可深度拷贝的房子)
但是NSMutableArray这样的不可以，Mutable的不能用copy,不然初始化会有问题。切记</p>

<p> <strong><em>什么时候用retain</em></strong></p>

<p>其他NSObject和其子类对象好嘛 (大多数)</p>

<h5>ARC中的strong相当于非ARC中的retain，ARC来了以后多搞一把钥匙就strong了啦。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git创建远程分支]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/07/git%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <updated>2014-08-07T18:30:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/07/git创建远程分支</id>
    <content type="html"><![CDATA[<h4>在git里面，分支允许隔离开发自己的项目。创建远程分支步骤如下：</h4>

<pre><code>  1.先git init//创建git版本库
  2.在git branch develop//本地电脑创建了一个develop分支
  3.git remote add origin https://github.com/kAirzhen/kAirzhen.github.io//关联远程代码库了么
  4.git add .//添加想要提交的文件名称，此处表示将当前目录（包括其子目录）所有被修改或者已删除的文档，以及用户所添加的新文档，追加到索引中。
  5.git commit -a -m "保存develop分支"//只将所有被修改或者已删除的且已经被git管理的文档提交到仓库中，并描述提交信息。
  6.git push origin develop//把本地文件就提交到了远程develop分支上
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外部化表数据之Property List]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/06/%E5%A4%96%E9%83%A8%E5%8C%96%E8%A1%A8%E6%95%B0%E6%8D%AE%E4%B9%8BProperty+List/"/>
    <updated>2014-08-06T20:48:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/06/外部化表数据之Property List</id>
    <content type="html"><![CDATA[<pre><code>将静态数据从代码中分离出来是一个很好的做法。
假设让需要添加100多个新数据到应用程序中,需要返回源代码,将新的数据添加到初始化代码中，这无疑使得代码看起来表冗长。同时编辑这些代码并不简单,并且必须要严格遵守Objective-C语法，更改代码可能会引入其他错误。最好是将数据和代码逻辑分离。
Property List 提供了一个方便的方法来存放简单的结构数据,通常为XML格式。但是不能使用Property List 存放所有类型的数据。
下面开始转换数据为 Property List：
首先创建一个空的Property List 文件。
其次在Property List中添加n个数据数组，并添加完成了所有数组元素。
最后Property List中读取内容相当简单iOS SDK已经有内置的方法来处理该文件的读写操作。
Property List并不是存放表数据的最好方法，还有很多其他方法。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写html邮件]]></title>
    <link href="http://kAirzhen.github.io/blog/2014/08/06/%E7%BC%96%E5%86%99HTML%E9%82%AE%E4%BB%B6/"/>
    <updated>2014-08-06T20:24:00+08:00</updated>
    <id>http://kAirzhen.github.io/blog/2014/08/06/编写HTML邮件</id>
    <content type="html"><![CDATA[<hr />

<pre><code>....在 SimpleEmail App 中仅仅支持文本邮件。通过更改 setMessageBody 方法中的 isHTML 参数 – 从 N 更改为 Y,App 将支持 HTML 邮件。再次更 改 showEmail 方法的代码如下:
    -(IBAction)showEmail:(id)sender {// Email Subject
 NSString *emailTitle = @"Test Email"; // Email Content
      ￼NSString *messageBody = @"&lt;h1&gt;Test iOS Programming!&lt;/h1&gt;"; 
      NSArray *toRecipents = [NSArray arrayWithObject:@"support@appcoda.com"];
      MFMailComposeViewController *mc = [[MFMailComposeViewController alloc] init];
      mc.mailComposeDelegate = self;
      [mc setSubject:emailTitle];
      [mc setMessageBody:messageBody isHTML:YES]; 

 [mc setToRecipients:toRecipents];
      [self presentViewController:mc animated:YES completion:NULL];
     }
</code></pre>

<p>   &hellip;.编译并再次运行 App。经过一些简单的更改,SimpleEmail 应用程序现在提供了HTML 支持了!注：Xcode不知道 MFMailComposeViewController 是什么。尽管MFMailComposeViewController 是iOS SDK内置的控制器,但是需要在项目中嵌入必要的框架MessageUI.framework。否则编译时会报错。</p>
]]></content>
  </entry>
  
</feed>
